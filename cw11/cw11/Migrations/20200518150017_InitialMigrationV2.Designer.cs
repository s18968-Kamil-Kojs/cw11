// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cw11.Models;

namespace cw11.Migrations
{
    [DbContext(typeof(PharmacyDbContext))]
    [Migration("20200518150017_InitialMigrationV2")]
    partial class InitialMigrationV2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("cw11.Models.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDoctor");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            IdDoctor = 1,
                            Email = "a.mordacz@gmail.com",
                            FirstName = "Anna",
                            LastName = "Mordacz"
                        },
                        new
                        {
                            IdDoctor = 2,
                            Email = "t.tomaczowski@gmail.com",
                            FirstName = "Tomasz",
                            LastName = "Tomaczowski"
                        },
                        new
                        {
                            IdDoctor = 3,
                            Email = "a.andrzejewski@gmail.com",
                            FirstName = "Andrzej",
                            LastName = "Andrzejewski"
                        });
                });

            modelBuilder.Entity("cw11.Models.Medicament", b =>
                {
                    b.Property<int>("IdMedicament")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMedicament");

                    b.ToTable("Medicament");

                    b.HasData(
                        new
                        {
                            IdMedicament = 1,
                            Description = "Lek na goraczke",
                            Name = "Fervex",
                            Type = "Przeciwgoraczkowy"
                        },
                        new
                        {
                            IdMedicament = 2,
                            Description = "Lek na goraczke",
                            Name = "Gripex",
                            Type = "Przeciwgoraczkowy"
                        },
                        new
                        {
                            IdMedicament = 3,
                            Description = "Lek na odciski",
                            Name = "Acutol",
                            Type = "Leczniczy"
                        },
                        new
                        {
                            IdMedicament = 4,
                            Description = "Lek na odpornosc",
                            Name = "Witamina C",
                            Type = "Wzmacniajacy"
                        },
                        new
                        {
                            IdMedicament = 5,
                            Description = "Lek na odpornosc",
                            Name = "Witamina B",
                            Type = "Wzmacniajacy"
                        });
                });

            modelBuilder.Entity("cw11.Models.Patient", b =>
                {
                    b.Property<int>("IdPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPatient");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            IdPatient = 1,
                            Birthdate = new DateTime(2020, 5, 18, 17, 0, 17, 194, DateTimeKind.Local).AddTicks(6930),
                            FirstName = "Jan",
                            LastName = "Kowalski"
                        },
                        new
                        {
                            IdPatient = 2,
                            Birthdate = new DateTime(2020, 5, 18, 17, 0, 17, 197, DateTimeKind.Local).AddTicks(9000),
                            FirstName = "Ania",
                            LastName = "Andrzejewska"
                        },
                        new
                        {
                            IdPatient = 3,
                            Birthdate = new DateTime(2020, 5, 18, 17, 0, 17, 197, DateTimeKind.Local).AddTicks(9070),
                            FirstName = "Ola",
                            LastName = "Sparc"
                        },
                        new
                        {
                            IdPatient = 4,
                            Birthdate = new DateTime(2020, 5, 18, 17, 0, 17, 197, DateTimeKind.Local).AddTicks(9070),
                            FirstName = "Kasia",
                            LastName = "Kowalczyk"
                        },
                        new
                        {
                            IdPatient = 5,
                            Birthdate = new DateTime(2020, 5, 18, 17, 0, 17, 197, DateTimeKind.Local).AddTicks(9080),
                            FirstName = "Bartosz",
                            LastName = "Nowak"
                        });
                });

            modelBuilder.Entity("cw11.Models.Prescription", b =>
                {
                    b.Property<int>("IdPrescription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.HasKey("IdPrescription");

                    b.ToTable("Prescription");

                    b.HasData(
                        new
                        {
                            IdPrescription = 1,
                            Date = new DateTime(2020, 5, 18, 17, 0, 17, 200, DateTimeKind.Local).AddTicks(8420),
                            DueDate = new DateTime(2020, 5, 18, 17, 0, 17, 200, DateTimeKind.Local).AddTicks(8940),
                            IdDoctor = 1,
                            IdPatient = 1
                        },
                        new
                        {
                            IdPrescription = 2,
                            Date = new DateTime(2020, 5, 18, 17, 0, 17, 201, DateTimeKind.Local).AddTicks(150),
                            DueDate = new DateTime(2020, 5, 18, 17, 0, 17, 201, DateTimeKind.Local).AddTicks(170),
                            IdDoctor = 1,
                            IdPatient = 2
                        },
                        new
                        {
                            IdPrescription = 3,
                            Date = new DateTime(2020, 5, 18, 17, 0, 17, 201, DateTimeKind.Local).AddTicks(200),
                            DueDate = new DateTime(2020, 5, 18, 17, 0, 17, 201, DateTimeKind.Local).AddTicks(210),
                            IdDoctor = 2,
                            IdPatient = 3
                        },
                        new
                        {
                            IdPrescription = 4,
                            Date = new DateTime(2020, 5, 18, 17, 0, 17, 201, DateTimeKind.Local).AddTicks(210),
                            DueDate = new DateTime(2020, 5, 18, 17, 0, 17, 201, DateTimeKind.Local).AddTicks(210),
                            IdDoctor = 3,
                            IdPatient = 4
                        },
                        new
                        {
                            IdPrescription = 5,
                            Date = new DateTime(2020, 5, 18, 17, 0, 17, 201, DateTimeKind.Local).AddTicks(220),
                            DueDate = new DateTime(2020, 5, 18, 17, 0, 17, 201, DateTimeKind.Local).AddTicks(220),
                            IdDoctor = 3,
                            IdPatient = 5
                        });
                });

            modelBuilder.Entity("cw11.Models.Prescription_Medicamant", b =>
                {
                    b.Property<int>("IdMedicament")
                        .HasColumnType("int");

                    b.Property<int>("IdPrescription")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dose")
                        .HasColumnType("int");

                    b.HasKey("IdMedicament", "IdPrescription");

                    b.ToTable("GetPrescription_Medicamant");

                    b.HasData(
                        new
                        {
                            IdMedicament = 1,
                            IdPrescription = 1,
                            Details = "2 razy dziennie",
                            Dose = 2
                        },
                        new
                        {
                            IdMedicament = 2,
                            IdPrescription = 2,
                            Details = "1 raz dziennie",
                            Dose = 1
                        },
                        new
                        {
                            IdMedicament = 3,
                            IdPrescription = 3,
                            Details = "3 razy dziennie",
                            Dose = 3
                        },
                        new
                        {
                            IdMedicament = 4,
                            IdPrescription = 4,
                            Details = "2 razy dziennie",
                            Dose = 2
                        },
                        new
                        {
                            IdMedicament = 5,
                            IdPrescription = 5,
                            Details = "2 razy dziennie",
                            Dose = 2
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
